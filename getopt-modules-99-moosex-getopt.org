#+BLOG: perlancar
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: perl,cli,getopt
#+TAGS: perl,cli,getopt
#+DESCRIPTION:
#+TITLE: Getopt modules 99: MooseX::Getopt

*About this mini-article series.* Each day for 24 days, I will be reviewing a
module that parses command-line options (such module is usually under the
~Getopt::*~ namespace). [[https://perlancar.wordpress.com/2016/12/01/getopt-modules-01-getoptlong/][First article is here]].

[[https://metacpan.org/pod/MooseX::Getopt][MooseX::Getopt]] is a role to let you set your [[https://metacpan.org/pod/Moose][Moose]] object's attributes from
command-line options. It uses Getopt::Long as the options parser, but you don't
need to explicitly specify an options specification: the role will instead
figure out the names of options and various rules for you as much as possible.

It's first released in 2007 by the original author of Moose, Stevan Little
([[https://metacpan.org/author/STEVAN][STEVAN]]), not too long after Moose is released in 2006. Over the years, some
people have maintained it and since 2012 Karen Etheridge ([[https://metacpan.org/author/ETHER][ETHER]]) is the primary
maintainer. Karen currently also maintains a lot of other modules in the Moose
ecosystem.

About 94 CPAN distributions depend on this module, making it possibly the most
popular way to quickly create CLI script from an object. Meanwhile, for creating
CLI scripts with subcommands, [[https://metacpan.org/pod/App::Cmd][App::Cmd]] (together with [[https://metacpan.org/pod/MooseX::App::Cmd][MooseX::App::Cmd]]) looks to
be the most popular way.

To use MooseX::Options, you include this role in your class. Then, instead of
using ~new~ to construct your object, you use ~new_with_options~ instead.

#+BEGIN_SRC perl
package My::App;
use Moose;

with 'MooseX::Getopt';

has 'foo' => (is => 'rw', isa => 'Str', required => 1);
has 'bar' => (is => 'rw', isa => 'Int', default => 10);
has 'baz' => (is => 'rw', isa => 'ArrayRef', documentation => 'one or more files');
#+END_SRC

Your CLI script is simply something like:

#+BEGIN_SRC perl
#!perl
use My::App;
My::App->new_with_options;
#+END_SRC

When you call your CLI script:

: % myapp --foo blah --baz a --baz b

your object will have its ~foo~ set to ~"blah"~, ~bar~ set to the default ~10~,
and ~baz~ set to ~["a", "b"]~. If you do not specify option for required
attributes, or specify ~--usage~ or ~--help~, then a usage message will be
printed. The usage message will use the attributes' ~documentation~ option:

: % myapp -h
: usage: myapp [-?h] [long options...]
:         -h -? --usage --help  Prints this usage information.
:         --foo STR
:         --bar STR
:         --baz STR...          one or more files

A ~--version~ handler is also provided:

: % myapp --version
: /home/u1/test/moosex-getopt/myapp
: (Getopt::Long::GetOptions version 2.48; Perl version 5.24.0)

Some types like ~Str~, ~Float~, and ~Int~ can easily be mapped into
Getopt::Long's ~--opt=i~. Arrayrefs and hashrefs are also mapped to ~=s@~ and
~=s%~. For other types, you can provide a mapping between Moose type and
Getopt::Long specification (like mapping between ~ArrayOfInts~ with ~=i@~ shown
in the documentation). Since Moose also supports coercion, this also makes it
possible to do something like:

: % myapp --since '2016-01-01'

and your object's attribute will become a DateTime object.

If you want config file support, there's a separate role [[https://metacpan.org/pod/MooseX::ConfigFromFile][MooseX::ConfigFromFile]].

In short, this module is DRY, DWIM, simple to use so it's hard to complain
about. My nitpick is that it doesn't translate underscore to dash, e.g. your
attribute ~foo_bar~ becomes ~--foo_bar~ instead of ~--foo-bar~ but this is a
matter of personal preference. And of course, this module works only with Moose
objects. There are counterpart for Moo like [[https://metacpan.org/pod/MooX::Options][MooX::Options]] which I will also
cover in this series, although that module is not as DWIM as MooseX::Getopt.
