#+BLOG: perlancar
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: perl,cli,getopt
#+TAGS: perl,cli,getopt
#+DESCRIPTION:
#+TITLE: Getopt modules: Epilogue

*About this mini-article series.* For each of the past 24 days, I have reviewed
a module that parses command-line options (such module is usually under the
~Getopt::*~ namespace). [[https://perlancar.wordpress.com/2016/12/01/getopt-modules-01-getoptlong/][First article is here]].

This series was born out of my experimentations with option parsing and tab
completion, and more broadly of my interest in doing CLI with Perl. Aside from
this writing, I've released modules related to option parsing, some of them are
experimental in nature and some are already used in production.

In general, I'd say that you should probably try to stick with [[https://metacpan.org/pod/Getopt::Long][Getopt::Long]]
first. As far as option parsing is concerned, it's packed with features already,
and it has the advantage of being a core module. But if you are creating a more
complex CLI application, particularly as soon as you want to introduce
(sub)commands, you might want to reach out for other modules or higher-level CLI
frameworks.

It has been interesting evaluating the various other modules: the sometimes
unconventional or seemingly odd approach that they take, or the specific
features that they offer. Not all of them are worth using, but at least they
provide perspectives and some lessons for us to learn.

| name                      | GL-based | GL-like interface | spec     | validation | required | default | deps | (sub)command | autohelp |
|---------------------------+----------+-------------------+----------+------------+----------+---------+------+--------------+----------|
| Getopt::Long              | n/a      | n/a               | y        | y          | n        | n       | n    | n            | n        |
| Getopt::Std               | n        | n                 | y        | n          | n        | n       | n    | n            | n        |
| Getopt::Long::Descriptive | y        | partial           | y        | y          | y        | y       | n    | n            | y        |
| Getopt::Compact           | y        | partial           | y        | y          |          |         |      |              |          |
| Smart::Options            | n        | n                 | optional | y          |          |         |      |              |          |
| Opt::Imistic              | n        | n                 | n        | n          |          |         |      |              |          |
|                           |          |                   |          |            |          |         |      |              |          |

GL-based (Getopt::Long-based): whether the module delegates the actual option
parsing to Getopt::Long. This means the module only acts as a wrapper/front-end
for Getopt::Long.

GL-like interface: whether the module presents an interface that is identical or
similar to Getopt::Long. When it only adopts the option spec syntax (e.g.
~filename=s@~ or ~delay=i~) but not the ~GetOptions~ interface, I put in
"partial" in the column.

Unfortunately I haven't got the chance to deeply look into how option parsing is
done in other languages, but at least we looked at node's [[https://www.npmjs.com/package/optimist][optimist]]/[[https://www.npmjs.com/package/minimist][minimist]] and
Python's [[http://docopt.org][docopt]] and [[https://docs.python.org/3/library/argparse.html][argparse]] when we reviewed their Perl ports. Among the other
languages is Perl's own sister [[https://perl6.org][Perl 6]], which offers [[https://perl6advent.wordpress.com/2010/12/02/day-2-interacting-with-the-command-line-with-main-subs/][built-in command-line option
parsing]]. This endeavor could potentially offer more lessons and perspectives.

On the other hand, Perl's Getopt::Long also sees its ports in [[https://github.com/PaulWay/PHP-Console-GetoptLong][some]] [[https://www.npmjs.com/package/node-getopt-long][languages]]
(although some "getopt long" libraries might be inspired directly by the GNU C
library function ~getopt_long()~ instead of Perl's treatment of it).

Of course, many modules are not covered simply because there are a lot more than
24 of such modules ([[https://metacpan.org/pod/lcpan][lcpan]] tells me that there are 180 packages in the ~Getopt::~
namespace alone, with 94 distributions having the name ~Getopt-*~). I tried to
cover at least the "must-know"'s, core and popular ones. Other than that, it's
pretty much random. I covered what's interesting to me or what I can make some
points about, or what's bad design.

is an area where each programmer might have his/her own idea of ...

wtf moments.

others are too weird or wtf, but i won't name names here.

Chad Granum ([[https://metacpan.org/author/EXODIST][EXODIST]]) did some releases of Getopt::Again, a
module that is rather similar to David Golden's [[https://metacpan.org/pod/Getopt::Lucid][Getopt::Lucid]] in interface but
has explicit support for options that take filenames/pathnames as values. The
effort has been scrapped, though.

Some modules are quickly skipped for various reasons. Most simple . One module
was skipped because it uses Moose (probably to utilize Moose type system)
causing the startup overhead of script loading this module alone to be above
200-300ms.

I've avoided reviewing my own modules, which include [[https://metacpan.org/pod/Getopt::Long::Complete][Getopt::Long::Complete]]
(Getopt::Long wrapper which adds tab completion), [[https://metacpan.org/pod/Getopt::Long::Subcommand][Getopt::Long::Subcommand]]
(Getopt::Long wrapper, with support for subcommands), [[https://metacpan.org/pod/Getopt::Long::More][Getopt::Long::More]] (my
most recent Getopt::Long wrapper which adds tab completion and other features),
[[https://metacpan.org/pod/Getopt::Long::Less][Getopt::Long::Less]] & [[https://metacpan.org/pod/Getopt::Long::EvenLess][Getopt::Long::EvenLess]] (two leaner versions of Getopt::Long
for the specific goal of reducing startup overhead), [[https://metacpan.org/pod/Getopt::Panjang][Getopt::Panjang]] (a break
from Getopt::Long interface compatibility to explore new possibilities), and
[[https://metacpan.org/pod/Perinci::CmdLine::Lite][Perinci::CmdLine]] (CLI framework which currently uses Getopt::Long but plans to
switch backend in the long run; the framework for which I've written a [[https://perlancar.wordpress.com/tag/pericmd-tut/][whole
series]] of tutorial posts).

| name                     | GL-based | GL-like interface | spec | validation | required | default | deps    | autohelp |
|--------------------------+----------+-------------------+------+------------+----------+---------+---------+----------|
| Getopt::Long::Complete   | y        | y                 | y    |            |          |         |         |          |
| Getopt::Long::Subcommand | y        | n                 | y    |            |          |         |         |          |
| Getopt::Long::Less       | n        | y                 | y    |            |          |         |         |          |
| Getopt::Long::EvenLess   | n        | y                 | y    |            |          |         |         |          |
| Getopt::Long::More       | y        | y                 | y    | y          | y        | y       | planned | y        |
| Perinci::CmdLine         | y        | n                 | y    | y          | y        | y       | y       | y        |
| Getopt::Panjang          | n        | n                 | y    | y          |          |         |         |          |

I hope this series is of use to some people. Merry christmas and happy holidays
to everybody.
